#include <iostream>
#include <vector>
#include <cmath>
#include <cuda_runtime.h>

__global__ void dot_kernel(const int size, const double* __restrict__ x,
                           const double* __restrict__ y, double* __restrict__ RES) {
    const int n_threads = blockDim.x;
    const int tidx = threadIdx.x;
    extern __shared__ double TEMP[];

    TEMP[tidx] = 0;

    for (int i = tidx; i < size; i += n_threads) {
        TEMP[tidx] += x[i] * y[i];
    }

    __syncthreads();

    for (int j = n_threads / 2; j > 0; j /= 2) {
        if (tidx < j) {
            TEMP[tidx] += TEMP[tidx + j];
        }
        __syncthreads();
    }

    if (tidx == 0) {
        *RES = TEMP[0];
    }
}

double DotProduct_CUDA(const std::vector<double>& vec1, const std::vector<double>& vec2) {
    int N_g = vec1.size();
    double result = 0.0;

    // Allocate device memory
    double* d_vec1;
    double* d_vec2;
    double* d_result;

    cudaMalloc((void**)&d_vec1, N_g * sizeof(double));
    cudaMalloc((void**)&d_vec2, N_g * sizeof(double));
    cudaMalloc((void**)&d_result, sizeof(double));

    // Copy data to device
    cudaMemcpy(d_vec1, vec1.data(), N_g * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_vec2, vec2.data(), N_g * sizeof(double), cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int blocksPerGrid = (N_g + threadsPerBlock - 1) / threadsPerBlock;

    dot_kernel<<<blocksPerGrid, threadsPerBlock, N_g * sizeof(double)>>>(N_g, d_vec1, d_vec2, d_result);

    // Copy result back to host
    cudaMemcpy(&result, d_result, sizeof(double), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_vec1);
    cudaFree(d_vec2);
    cudaFree(d_result);

    return result;
}

int main() {
    // Example usage
    std::vector<double> Nnew = {...}; // Proper values for Nnew
    std::vector<double> Nold = {...}; // Proper values for Nold
    std::vector<double> dV = {...};   // Proper values for dV

    int N_g = Nnew.size();

    double sum_Nnew_dV = DotProduct_CUDA(Nnew, dV);
    double sum_Nold_dV = DotProduct_CUDA(Nold, dV);

    // Print or use the results as needed...
    std::cout << "sum_Nnew_dV: " << sum_Nnew_dV << std::endl;
    std::cout << "sum_Nold_dV: " << sum_Nold_dV << std::endl;

    return 0;
}
