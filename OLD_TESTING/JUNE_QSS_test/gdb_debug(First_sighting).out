GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from explicitMatrix...
(gdb) b 3324 if totalTimeSteps>304 [C[1P[1P[1P[1@6[1@3[1@7[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K447
Breakpoint 1 at 0xf657: file explicitMatrix.cpp, line 3637.
(gdb) r
Starting program: /home/jared/Thermo-nuclear-network/explicitMatrix/explicitMatrix 

Wed Jun  8 11:28:22 2022


Integration using QSS+PE method
T9=7.000e+00 rho=1.000e+08 massTol=1.000e-07 sf=1.00e+25 equiTol=1.00e-02 equilTime=1.00e-13
maxit=20 downbumper= 0.700 EpsA=1.00e-03 EpsR=2.00e-04
Network: data/network_alpha.inp  Rates: data/rateLibrary_alpha.data
Integration steps=0  totalIterations=0  IntegrationSteps_plotted=0
Timer: 6.1640e+00 ms used

BEGIN TIME INTEGRATION:

1 it=0 t=1.63e-18 dt=1.63e-19 int=57 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=2.69e+10 E_R=3.33e-13 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
2 it=0 t=2.63e-18 dt=2.63e-19 int=62 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=4.34e+10 E_R=7.77e-13 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
3 it=0 t=4.24e-18 dt=4.24e-19 int=67 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=6.99e+10 E_R=2.00e-12 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
4 it=0 t=6.82e-18 dt=6.82e-19 int=72 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.13e+11 E_R=5.33e-12 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
5 it=0 t=1.10e-17 dt=1.10e-18 int=77 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.82e+11 E_R=1.39e-11 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
6 it=0 t=1.61e-17 dt=1.61e-18 int=81 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=2.66e+11 E_R=2.96e-11 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
7 it=0 t=2.59e-17 dt=2.59e-18 int=86 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=4.29e+11 E_R=7.68e-11 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
8 it=0 t=4.17e-17 dt=4.17e-18 int=91 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=6.90e+11 E_R=1.99e-10 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
9 it=0 t=6.72e-17 dt=6.72e-18 int=96 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.11e+12 E_R=5.17e-10 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
10 it=0 t=1.08e-16 dt=1.08e-17 int=101 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.79e+12 E_R=1.34e-09 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
11 it=0 t=1.74e-16 dt=1.74e-17 int=106 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=2.88e+12 E_R=3.48e-09 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
12 it=0 t=2.55e-16 dt=2.55e-17 int=110 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=4.22e+12 E_R=7.45e-09 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
13 it=0 t=4.11e-16 dt=4.11e-17 int=115 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=6.80e+12 E_R=1.93e-08 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
14 it=0 t=6.62e-16 dt=6.62e-17 int=120 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.10e+13 E_R=5.01e-08 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
15 it=0 t=1.07e-15 dt=1.07e-16 int=125 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.76e+13 E_R=1.30e-07 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
16 it=0 t=1.72e-15 dt=1.72e-16 int=130 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=2.84e+13 E_R=3.37e-07 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
17 it=0 t=2.51e-15 dt=2.51e-16 int=134 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=4.16e+13 E_R=7.21e-07 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
18 it=0 t=4.05e-15 dt=4.05e-16 int=139 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=6.69e+13 E_R=1.87e-06 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
19 it=0 t=6.52e-15 dt=6.52e-16 int=144 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.65e+28 E=1.08e+14 E_R=4.83e-06 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
20 it=0 t=1.05e-14 dt=1.05e-15 int=149 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.64e+28 E=1.73e+14 E_R=1.25e-05 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
21 it=0 t=1.69e-14 dt=1.69e-15 int=154 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.64e+28 E=2.78e+14 E_R=3.22e-05 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
22 it=0 t=2.72e-14 dt=2.72e-15 int=159 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.62e+28 E=4.46e+14 E_R=8.25e-05 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
23 it=0 t=3.99e-14 dt=3.99e-15 int=163 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.61e+28 E=6.51e+14 E_R=1.75e-04 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
24 it=0 t=6.42e-14 dt=6.42e-15 int=168 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.58e+28 E=1.04e+15 E_R=4.42e-04 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
25 it=0 t=1.03e-13 dt=1.03e-14 int=173 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.54e+28 E=1.65e+15 E_R=1.10e-03 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
26 it=0 t=1.67e-13 dt=1.67e-14 int=178 Asy=0/16 Eq=0/19 SX=1.0000 dE=1.48e+28 E=2.60e+15 E_R=2.68e-03 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
27 it=0 t=2.68e-13 dt=2.68e-14 int=183 Asy=0/16 Eq=0/19 SX=1.0001 dE=1.39e+28 E=4.05e+15 E_R=6.30e-03 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
28 it=0 t=4.32e-13 dt=4.32e-14 int=188 Asy=0/16 Eq=0/19 SX=1.0001 dE=1.25e+28 E=6.18e+15 E_R=1.40e-02 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
29 it=0 t=6.33e-13 dt=6.33e-14 int=192 Asy=0/16 Eq=0/19 SX=1.0003 dE=1.11e+28 E=8.52e+15 E_R=2.52e-02 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
30 it=0 t=1.02e-12 dt=1.02e-13 int=197 Asy=0/16 Eq=0/19 SX=1.0005 dE=9.01e+27 E=1.23e+16 E_R=4.78e-02 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
31 it=0 t=1.64e-12 dt=1.64e-13 int=202 Asy=0/16 Eq=0/19 SX=1.0010 dE=6.62e+27 E=1.70e+16 E_R=7.97e-02 ch=1 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
32 it=0 t=2.64e-12 dt=2.64e-13 int=207 Asy=0/16 Eq=0/19 SX=1.0018 dE=4.30e+27 E=2.21e+16 E_R=1.14e-01 ch=0 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
33 it=0 t=4.26e-12 dt=4.26e-13 int=212 Asy=0/16 Eq=0/19 SX=1.0028 dE=2.35e+27 E=2.70e+16 E_R=1.39e-01 ch=0 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
34 it=0 t=6.85e-12 dt=6.85e-13 int=217 Asy=0/16 Eq=0/19 SX=1.0039 dE=9.88e+26 E=3.07e+16 E_R=1.52e-01 ch=0 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
35 it=0 t=1.00e-11 dt=1.00e-12 int=221 Asy=0/16 Eq=0/19 SX=1.0049 dE=3.12e+26 E=3.24e+16 E_R=1.63e-01 ch=0 ch2=1 fast:c12+c12-->he4+ne20 Q=+4.621 dev=+0.000e+00
36 it=0 t=1.62e-11 dt=1.62e-12 int=226 Asy=0/16 Eq=0/19 SX=1.0063 dE=-1.10e+26 E=3.24e+16 E_R=2.05e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
37 it=0 t=2.60e-11 dt=2.60e-12 int=231 Asy=0/16 Eq=0/19 SX=1.0083 dE=-2.10e+26 E=3.05e+16 E_R=3.12e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
38 it=0 t=4.19e-11 dt=4.19e-12 int=236 Asy=0/16 Eq=0/19 SX=1.0113 dE=-1.37e+26 E=2.78e+16 E_R=4.69e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
39 it=0 t=6.75e-11 dt=6.75e-12 int=241 Asy=0/16 Eq=0/19 SX=1.0154 dE=-2.01e+25 E=2.62e+16 E_R=5.52e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
40 it=0 t=1.09e-10 dt=1.09e-11 int=246 Asy=0/16 Eq=0/19 SX=1.0191 dE=5.99e+25 E=2.77e+16 E_R=4.23e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
41 it=0 t=1.59e-10 dt=1.59e-11 int=250 Asy=0/16 Eq=0/19 SX=1.0210 dE=8.58e+25 E=3.17e+16 E_R=2.25e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
42 it=0 t=2.56e-10 dt=2.56e-11 int=255 Asy=0/16 Eq=0/19 SX=1.0218 dE=9.17e+25 E=4.05e+16 E_R=2.89e-02 ch=1 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
43 it=0 t=4.13e-10 dt=4.13e-11 int=260 Asy=0/16 Eq=0/19 SX=1.0215 dE=8.51e+25 E=5.43e+16 E_R=9.33e-02 ch=1 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
44 it=0 t=6.65e-10 dt=6.65e-11 int=265 Asy=1/16 Eq=0/19 SX=1.0202 dE=6.97e+25 E=7.34e+16 E_R=2.55e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
45 it=0 t=1.07e-09 dt=1.07e-10 int=270 Asy=2/16 Eq=0/19 SX=1.0174 dE=4.88e+25 E=9.64e+16 E_R=4.84e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
46 it=0 t=1.72e-09 dt=1.72e-10 int=275 Asy=2/16 Eq=0/19 SX=1.0132 dE=2.89e+25 E=1.20e+17 E_R=6.96e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
47 it=0 t=2.53e-09 dt=2.53e-10 int=279 Asy=2/16 Eq=0/19 SX=1.0092 dE=1.69e+25 E=1.36e+17 E_R=7.54e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
48 it=0 t=4.07e-09 dt=4.07e-10 int=284 Asy=3/16 Eq=0/19 SX=1.0044 dE=7.58e+24 E=1.53e+17 E_R=5.96e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+0.000e+00
49 it=0 t=6.59e-09 dt=5.25e-10 int=290 Asy=3/16 Eq=1/19 SX=1.0000 dE=1.40e+24 E=1.61e+17 E_R=7.12e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+1.451e-01
50 it=0 t=1.09e-08 dt=1.09e-09 int=296 Asy=5/16 Eq=1/19 SX=1.0000 dE=2.51e+23 E=1.63e+17 E_R=7.51e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+2.884e-01
51 it=0 t=1.59e-08 dt=1.59e-09 int=300 Asy=6/16 Eq=2/19 SX=1.0000 dE=-1.96e+23 E=1.63e+17 E_R=3.02e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+3.932e-02
52 it=0 t=2.56e-08 dt=2.56e-09 int=305 Asy=5/16 Eq=5/19 SX=1.0000 dE=-2.85e+23 E=1.60e+17 E_R=4.60e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+1.496e-01
53 it=0 t=4.12e-08 dt=4.12e-09 int=310 Asy=5/16 Eq=5/19 SX=1.0000 dE=-1.60e+23 E=1.57e+17 E_R=5.04e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+3.083e-01
54 it=0 t=6.43e-08 dt=1.35e-09 int=317 Asy=7/16 Eq=1/19 SX=1.0000 dE=-1.81e+25 E=8.61e+16 E_R=2.58e+02 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+3.358e-01
55 it=0 t=1.00e-07 dt=2.25e-09 int=351 Asy=4/16 Eq=3/19 SX=1.0000 dE=-3.98e+23 E=-1.48e+17 E_R=2.00e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+2.742e-02
56 it=0 t=1.60e-07 dt=1.58e-09 int=391 Asy=4/16 Eq=4/19 SX=1.0000 dE=-4.28e+23 E=-2.11e+17 E_R=9.40e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+4.042e-01
57 it=0 t=2.59e-07 dt=2.03e-08 int=447 Asy=8/16 Eq=4/19 SX=1.0000 dE=-1.19e+23 E=-2.40e+17 E_R=2.30e-01 ch=0 ch2=1 fast:ne20-->he4+o16 Q=-4.734 dev=+1.814e-01
Breakpoint 1, Integrate::updatePopulations (dtt=1.0152587412429789e-08) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) watch dt
Hardware watchpoint 2: dt
(gdb) watch diffX
Hardware watchpoint 3: diffX
(gdb) watch To[K[KtotalTimeStr[Keps
Hardware watchpoint 4: totalTimeSteps
(gdb) s
Integrate::QSSupdate () at explicitMatrix.cpp:3746
3746	    static void QSSupdate(){
(gdb) s
3751	        int nitQSS = 1;
(gdb) 
3753	        for (int i = 0; i < nitQSS; i++) {
(gdb) 
3755	            ssPredictor();
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3771
3771	    static void ssPredictor() {
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=5.6098546337625605e-314) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.035540688472176028) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=5.5193042019753156) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=5.6126517129230926) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=214.10906627842618) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=32.816537901871278) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.28239707303519063) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.051416433431889355) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.035606576523115649) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.0091064376039461867) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.014385120186264066) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=22.913929987129478) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=1.8142380020253115) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3803	        computeReactionFluxes();
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5626
5626	void computeReactionFluxes(){
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x402084c200cc0b78) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x33ab8c3fe8d9d200, bodies=989026242) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2094	                    kfac = Rrate * Y[ reactantIndex[0] ] * Y[ reactantIndex[1] ];
(gdb) 
2095	                    flux = kfac * Y[ reactantIndex[2] ];  // Put in Reaction object flux field
(gdb) 
2096	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2097	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555ddac0, testRate=0.77870139596788457) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557d940 <reaction>, bodies=3) at explicitMatrix.cpp:2099
2099	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557d940 <reaction>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557d940 <reaction>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557d940 <reaction>, bodies=3) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2094	                    kfac = Rrate * Y[ reactantIndex[0] ] * Y[ reactantIndex[1] ];
(gdb) 
2095	                    flux = kfac * Y[ reactantIndex[2] ];  // Put in Reaction object flux field
(gdb) 
2096	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2097	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557d940 <reaction>, testRate=732.11013314635693) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557db18 <reaction+472>, bodies=3) at explicitMatrix.cpp:2099
2099	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557db18 <reaction+472>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557db18 <reaction+472>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557db18 <reaction+472>, bodies=3) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557db18 <reaction+472>, testRate=0) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557dcf0 <reaction+944>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557dcf0 <reaction+944>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557dcf0 <reaction+944>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557dcf0 <reaction+944>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557dcf0 <reaction+944>, testRate=0) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557dec8 <reaction+1416>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557dec8 <reaction+1416>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557dec8 <reaction+1416>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557dec8 <reaction+1416>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557dec8 <reaction+1416>, testRate=24750940) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e0a0 <reaction+1888>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e0a0 <reaction+1888>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e0a0 <reaction+1888>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e0a0 <reaction+1888>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e0a0 <reaction+1888>, testRate=3493045.8650008049) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e278 <reaction+2360>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e278 <reaction+2360>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e278 <reaction+2360>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e278 <reaction+2360>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e278 <reaction+2360>, testRate=289159167.73161286) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e450 <reaction+2832>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e450 <reaction+2832>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e450 <reaction+2832>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e450 <reaction+2832>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e450 <reaction+2832>, testRate=2758567.75) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e628 <reaction+3304>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e628 <reaction+3304>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e628 <reaction+3304>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e628 <reaction+3304>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e628 <reaction+3304>, testRate=228352016) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e800 <reaction+3776>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e800 <reaction+3776>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e800 <reaction+3776>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e800 <reaction+3776>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e800 <reaction+3776>, testRate=29378643.049003657) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e9d8 <reaction+4248>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e9d8 <reaction+4248>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e9d8 <reaction+4248>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e9d8 <reaction+4248>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e9d8 <reaction+4248>, testRate=194466054.85479623) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ebb0 <reaction+4720>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ebb0 <reaction+4720>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ebb0 <reaction+4720>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ebb0 <reaction+4720>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ebb0 <reaction+4720>, testRate=0.063588599682879082) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ed88 <reaction+5192>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ed88 <reaction+5192>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ed88 <reaction+5192>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ed88 <reaction+5192>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ed88 <reaction+5192>, testRate=316877868.88124216) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ef60 <reaction+5664>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ef60 <reaction+5664>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ef60 <reaction+5664>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ef60 <reaction+5664>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ef60 <reaction+5664>, testRate=3.0955657958984375) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f138 <reaction+6136>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f138 <reaction+6136>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f138 <reaction+6136>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f138 <reaction+6136>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f138 <reaction+6136>, testRate=15430676480) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f310 <reaction+6608>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f310 <reaction+6608>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f310 <reaction+6608>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f310 <reaction+6608>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f310 <reaction+6608>, testRate=1591117.979276476) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f4e8 <reaction+7080>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f4e8 <reaction+7080>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f4e8 <reaction+7080>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f4e8 <reaction+7080>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f4e8 <reaction+7080>, testRate=349324.27837591508) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f6c0 <reaction+7552>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f6c0 <reaction+7552>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f6c0 <reaction+7552>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f6c0 <reaction+7552>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f6c0 <reaction+7552>, testRate=249654.19343031946) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f898 <reaction+8024>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f898 <reaction+8024>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f898 <reaction+8024>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f898 <reaction+8024>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f898 <reaction+8024>, testRate=92.458376414453951) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fa70 <reaction+8496>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fa70 <reaction+8496>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fa70 <reaction+8496>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fa70 <reaction+8496>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fa70 <reaction+8496>, testRate=14225.498415643902) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fc48 <reaction+8968>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fc48 <reaction+8968>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fc48 <reaction+8968>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fc48 <reaction+8968>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fc48 <reaction+8968>, testRate=5488583939.3158674) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fe20 <reaction+9440>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fe20 <reaction+9440>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fe20 <reaction+9440>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fe20 <reaction+9440>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fe20 <reaction+9440>, testRate=372.80404663085938) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fff8 <reaction+9912>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fff8 <reaction+9912>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fff8 <reaction+9912>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fff8 <reaction+9912>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fff8 <reaction+9912>, testRate=143783488) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555801d0 <reaction+10384>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555801d0 <reaction+10384>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555801d0 <reaction+10384>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555801d0 <reaction+10384>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555801d0 <reaction+10384>, testRate=35962.411406127248) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555803a8 <reaction+10856>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555803a8 <reaction+10856>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555803a8 <reaction+10856>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555803a8 <reaction+10856>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555803a8 <reaction+10856>, testRate=1.4520643734814234) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580580 <reaction+11328>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580580 <reaction+11328>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580580 <reaction+11328>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580580 <reaction+11328>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580580 <reaction+11328>, testRate=186585146.27715293) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580758 <reaction+11800>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580758 <reaction+11800>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580758 <reaction+11800>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580758 <reaction+11800>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580758 <reaction+11800>, testRate=2915131803.6859298) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580930 <reaction+12272>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580930 <reaction+12272>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580930 <reaction+12272>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580930 <reaction+12272>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580930 <reaction+12272>, testRate=1673733.625) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580b08 <reaction+12744>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580b08 <reaction+12744>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580b08 <reaction+12744>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580b08 <reaction+12744>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580b08 <reaction+12744>, testRate=26141454) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580ce0 <reaction+13216>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580ce0 <reaction+13216>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580ce0 <reaction+13216>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580ce0 <reaction+13216>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580ce0 <reaction+13216>, testRate=1581297948.273412) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555580eb8 <reaction+13688>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555580eb8 <reaction+13688>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555580eb8 <reaction+13688>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555580eb8 <reaction+13688>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555580eb8 <reaction+13688>, testRate=2242589696) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581090 <reaction+14160>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581090 <reaction+14160>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581090 <reaction+14160>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581090 <reaction+14160>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581090 <reaction+14160>, testRate=331032931.02349597) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581268 <reaction+14632>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581268 <reaction+14632>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581268 <reaction+14632>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581268 <reaction+14632>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581268 <reaction+14632>, testRate=802330176) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581440 <reaction+15104>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581440 <reaction+15104>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581440 <reaction+15104>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581440 <reaction+15104>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581440 <reaction+15104>, testRate=98301243.842312664) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581618 <reaction+15576>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581618 <reaction+15576>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581618 <reaction+15576>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581618 <reaction+15576>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581618 <reaction+15576>, testRate=124856472) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555817f0 <reaction+16048>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555817f0 <reaction+16048>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555817f0 <reaction+16048>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2053	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555817f0 <reaction+16048>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555817f0 <reaction+16048>, testRate=403702383.82329988) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555819c8 <reaction+16520>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555819c8 <reaction+16520>) at explicitMatrix.cpp:2054
2054	                flux = 0.0;                 // Put in present (Reaction) object flux field
(gdb) 
2055	                Flux[reacIndex] = 0.0;      // Put in main flux array
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555819c8 <reaction+16520>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555819c8 <reaction+16520>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555819c8 <reaction+16520>, testRate=12409922560) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581ba0 <reaction+16992>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581ba0 <reaction+16992>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581ba0 <reaction+16992>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581ba0 <reaction+16992>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581ba0 <reaction+16992>, testRate=5086532.7184683587) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581d78 <reaction+17464>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581d78 <reaction+17464>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581d78 <reaction+17464>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581d78 <reaction+17464>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581d78 <reaction+17464>, testRate=2253195.75) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555581f50 <reaction+17936>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555581f50 <reaction+17936>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555581f50 <reaction+17936>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555581f50 <reaction+17936>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555581f50 <reaction+17936>, testRate=1259435.4726734804) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582128 <reaction+18408>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582128 <reaction+18408>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582128 <reaction+18408>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582128 <reaction+18408>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582128 <reaction+18408>, testRate=374352.25) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582300 <reaction+18880>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582300 <reaction+18880>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582300 <reaction+18880>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582300 <reaction+18880>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582300 <reaction+18880>, testRate=524892.35953968903) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555824d8 <reaction+19352>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555824d8 <reaction+19352>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555824d8 <reaction+19352>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555824d8 <reaction+19352>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555824d8 <reaction+19352>, testRate=143471.515625) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x5555555826b0 <reaction+19824>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x5555555826b0 <reaction+19824>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x5555555826b0 <reaction+19824>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x5555555826b0 <reaction+19824>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x5555555826b0 <reaction+19824>, testRate=1278993.9014993932) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582888 <reaction+20296>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582888 <reaction+20296>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582888 <reaction+20296>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582888 <reaction+20296>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582888 <reaction+20296>, testRate=2256861440) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582a60 <reaction+20768>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582a60 <reaction+20768>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582a60 <reaction+20768>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582a60 <reaction+20768>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582a60 <reaction+20768>, testRate=93679.002782943251) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582c38 <reaction+21240>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582c38 <reaction+21240>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582c38 <reaction+21240>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582c38 <reaction+21240>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582c38 <reaction+21240>, testRate=178028752) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582e10 <reaction+21712>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582e10 <reaction+21712>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x555555582e10 <reaction+21712>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x555555582e10 <reaction+21712>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x555555582e10 <reaction+21712>, testRate=671280.47629888065) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x555555582fe8 <reaction+22184>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x555555582fe8 <reaction+22184>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x55555555fec5 <Reaction::computeFlux()+91>) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x555555582fe8 <reaction+22184>, i=1, f=4.6355705407127062e-310) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555da700, i=0, f=61.447006309533776) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555da700, i=1, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555da700, i=2, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x555555582fe8 <reaction+22184>) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=-1066239913, f=8.5349267632763277e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dab50, i=0, f=50.37814844200048) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dab50, i=1, f=4170.3728030909069) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dab50, i=2, f=267.87406753424381) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555da700) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=-1059992735, f=9.6942244053027508e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dafa0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dafa0, i=0, f=423.71090954653437) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dafa0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dab50) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dafa0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dafa0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1080418978, f=5.9200936690200398e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555db3f0, i=0, f=6.174848105818516e-06) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555db3f0, i=1, f=30770.809833762869) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555db3f0, i=2, f=3.9577391828140108e-06) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dafa0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1086689587, f=9.0726671575729597e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db840) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555db840, i=0, f=154.50744141979339) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db840) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555db3f0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db840) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555db840) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1079979169, f=4.9596819788159031e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dbc90) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dbc90, i=0, f=24.24297328610492) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dbc90) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555db840) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dbc90) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dbc90) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1077371123, f=5.1000013450083257e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc0e0, i=0, f=0.018187567697397985) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc0e0, i=1, f=7017.2579576812122) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc0e0, i=2, f=0.031813758072716754) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dbc90) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=-1061911368, f=9.9542978859081107e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc530) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc530, i=0, f=0.045978620425090468) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc530) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dc0e0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc530) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc530) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1067489137, f=4.8452388818567481e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc980, i=0, f=15922.506092058205) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc980, i=1, f=248766.87576402989) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dc980, i=2, f=15645.268101191983) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dc530) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1085427251, f=9.1418133195909815e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dcdd0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dcdd0, i=0, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dcdd0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dc980) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dcdd0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dcdd0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=0, f=4.2439915819305446e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd220) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dd220, i=0, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd220) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dcdd0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd220) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd220) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=0, f=4.2439915819305446e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd670) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dd670, i=0, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd670) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dd220) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd670) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dd670) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=0, f=4.2439915819305446e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddac0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555ddac0, i=0, f=0) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddac0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dd670) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddac0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddac0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=0, f=4.2439915819305446e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddf10) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555ddf10, i=0, f=249.0799971393148) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddf10) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555ddac0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddf10) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555ddf10) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1079697692, f=6.2985427334368207e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de360) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555de360, i=0, f=79.127161034997783) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de360) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555ddf10) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de360) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de360) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1079109464, f=4.6278207662926634e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de7b0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555de7b0, i=0, f=10.533396156789063) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de7b0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555de360) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de7b0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555de7b0) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1076136101, f=4.9147001055845978e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dec00) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555dec00, i=0, f=2.375846499954005) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dec00) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555de7b0) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dec00) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555dec00) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1069646625, f=5.7691352498288815e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df050) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555df050, i=0, f=9.2938937592480526e-05) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df050) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555dec00) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df050) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df050) at explicitMatrix.cpp:2726
2726	    void setRGfluxes(){
(gdb) 
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0xbff0000000000000, i=1055167493, f=4.389893709092947e-314) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df4a0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2729	            setflux(i, Flux[ memberReactions[i] ]);
(gdb) 
ReactionGroup::setflux (this=0x5555555df4a0, i=0, f=3.1343916704684503e-07) at explicitMatrix.cpp:2706
2706	    void setflux(int i, double f){flux[i] = f;}
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df4a0) at explicitMatrix.cpp:2728
2728	        for(int i = 0; i < numberMemberReactions; i++){
(gdb) 
2734	        netflux = sumRGfluxes();
(gdb) 
ReactionGroup::sumRGfluxes (this=0x5555555df050) at explicitMatrix.cpp:2890
2890	    double sumRGfluxes(){
(gdb) 
2892	        double sumf = 0.0;
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2896	            fac = -1.0;
(gdb) 
2897	            if(isForward[i]) fac = 1.0;
(gdb) 
2898	            sumf += fac*flux[i];
(gdb) 
2895	        for (int i=0; i<numberMemberReactions; i++){
(gdb) 
2901	        netflux = sumf;
(gdb) 
2902	        return sumf;
(gdb) 
2904	    }    // End function sumRGfluxes()
(gdb) 
ReactionGroup::setRGfluxes (this=0x5555555df4a0) at explicitMatrix.cpp:2735
2735	    }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5643
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5654	    Reaction::populateFplusFminus();
(gdb) 
Reaction::populateFplusFminus () at explicitMatrix.cpp:1833
1833	        static void populateFplusFminus(){
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1837	                int indy = MapFplus[i];
(gdb) 
1838	                Fplus[i] = FplusFac[i]*Flux[indy];
(gdb) 
1836	            for(int i=0; i<totalFplus; i++){
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1841	                int indy = MapFminus[i];
(gdb) 
1842	                Fminus[i] = FminusFac[i]*Flux[indy];
(gdb) 
1840	            for(int i=0; i<totalFminus; i++){
(gdb) 
1844	        }
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5658
5658	    sumFplusFminus();
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5666
5666	void sumFplusFminus(){
(gdb) 
5668	    int minny = 0;
(gdb) 
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=-1074790400, fp=3.9034310670612677e-08) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x5555555df4a0, f=813516032) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=0, fp=316268.85664746183) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=0, fp=316268.85664746183) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557bb20 <isotope>, f=316268.85664746183) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=1, fp=23030.801261806508) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=1, fp=23030.801261806508) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557bd00 <isotope+480>, f=23030.801261806508) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=2, fp=23980.700103825431) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=2, fp=23980.700103825431) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557bee0 <isotope+960>, f=23980.700103825431) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=3, fp=43464.532472446444) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=3, fp=43464.532472446444) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557c0c0 <isotope+1440>, f=43464.532472446444) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=4, fp=267174.96520290856) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=4, fp=267174.96520290856) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557c2a0 <isotope+1920>, f=267174.96520290856) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=5, fp=264713.67080799461) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=5, fp=264713.67080799461) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557c480 <isotope+2400>, f=264713.67080799461) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=6, fp=0) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=6, fp=0) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557c660 <isotope+2880>, f=0) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=7, fp=0) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=7, fp=0) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557c840 <isotope+3360>, f=0) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=8, fp=0) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=8, fp=0) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557ca20 <isotope+3840>, f=0) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=9, fp=141.56261819048001) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=9, fp=141.56261819048001) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557cc00 <isotope+4320>, f=141.56261819048001) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=10, fp=256.59239559543516) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=10, fp=256.59239559543516) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557cde0 <isotope+4800>, f=256.59239559543516) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=11, fp=79.393672312214306) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=11, fp=79.393672312214306) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557cfc0 <isotope+5280>, f=79.393672312214306) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=12, fp=12.77242836567191) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=12, fp=12.77242836567191) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557d1a0 <isotope+5760>, f=12.77242836567191) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=13, fp=2.375929626434973) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=13, fp=2.375929626434973) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557d380 <isotope+6240>, f=2.375929626434973) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=14, fp=9.3213342448856764e-05) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5678	        if(i > 0) minny = FplusMax[i-1]+1;
(gdb) 
5679	        accum = 0.0;
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5682	            accum += Fplus[j];
(gdb) 
5681	        for(int j=minny; j<=FplusMax[i]; j++){
(gdb) 
5685	        setSpeciesfplus(i, accum);      // Also sets FplusSum[i] = accum;
(gdb) 
setSpeciesfplus (index=14, fp=9.3213342448856764e-05) at explicitMatrix.cpp:5559
5559	void setSpeciesfplus(int index, double fp){
(gdb) 
5560	    isotope[index].setfplus(fp);
(gdb) 
Species::setfplus (this=0x55555557d560 <isotope+6720>, f=9.3213342448856764e-05) at explicitMatrix.cpp:1247
1247	        void setfplus(double f){
(gdb) 
1248	            fplus = f;                  // Class field
(gdb) 
1249	            FplusSum[isoindex] = f;     // Array entry
(gdb) 
1250	        }
(gdb) 
setSpeciesfplus (index=15, fp=3.1343916704684503e-07) at explicitMatrix.cpp:5561
5561	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5674
5674	    for(int i=0; i < numberSpecies; i++){	
(gdb) 
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x5555555628af <ReactionGroup::computeEqRatios()+125>, f=6.9533558073733494e-310) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=0, fm=307502.9927294674) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557bb20 <isotope>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=0, fm=307502.9927294674) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557bb20 <isotope>, f=307502.9927294674) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=0, fm=307502.9927294674) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557bb20 <isotope>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=0, fm=307502.9927294674) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=3.1343916704684503e-07) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=0, dydt=8765.8639179944294) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557bb20 <isotope>, f=3679778.4159062053) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=1, fm=5579.6944577859158) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557bd00 <isotope+480>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=1, fm=5579.6944577859158) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557bd00 <isotope+480>, f=5579.6944577859158) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=1, fm=5579.6944577859158) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557bd00 <isotope+480>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=1, fm=5579.6944577859158) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=8765.8639179944294) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=1, dydt=17451.106804020594) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557bd00 <isotope+480>, f=101321048.9565639) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=2, fm=53416.076802441712) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557bee0 <isotope+960>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=2, fm=53416.076802441712) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557bee0 <isotope+960>, f=53416.076802441712) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=2, fm=53416.076802441712) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557bee0 <isotope+960>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=2, fm=53416.076802441712) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=17451.106804020594) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=2, dydt=-29435.376698616281) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557bee0 <isotope+960>, f=1872675975.7400002) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=3, fm=26994.361197449092) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557c0c0 <isotope+1440>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=3, fm=26994.361197449092) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557c0c0 <isotope+1440>, f=26994.361197449092) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=3, fm=26994.361197449092) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557c0c0 <isotope+1440>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=3, fm=26994.361197449092) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=-29435.376698616281) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=3, dydt=16470.171274997352) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557c0c0 <isotope+1440>, f=10974566864.487684) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=4, fm=276989.19008484011) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557c2a0 <isotope+1920>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=4, fm=276989.19008484011) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557c2a0 <isotope+1920>, f=276989.19008484011) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=4, fm=276989.19008484011) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557c2a0 <isotope+1920>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=4, fm=276989.19008484011) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=16470.171274997352) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=4, dydt=-9814.2248819315573) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557c2a0 <isotope+1920>, f=3380811805.5654411) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=5, fm=260004.05944650009) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557c480 <isotope+2400>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=5, fm=260004.05944650009) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557c480 <isotope+2400>, f=260004.05944650009) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=5, fm=260004.05944650009) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557c480 <isotope+2400>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=5, fm=260004.05944650009) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=-9814.2248819315573) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=5, dydt=4709.6113614945207) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557c480 <isotope+2400>, f=27573532.636678595) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=6, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557c660 <isotope+2880>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=6, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557c660 <isotope+2880>, f=0) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=6, fm=0) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557c660 <isotope+2880>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=6, fm=0) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=4709.6113614945207) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=6, dydt=0) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557c660 <isotope+2880>, f=0) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=7, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557c840 <isotope+3360>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=7, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557c840 <isotope+3360>, f=0) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=7, fm=0) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557c840 <isotope+3360>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=7, fm=0) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=0) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=7, dydt=0) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557c840 <isotope+3360>, f=0) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=8, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557ca20 <isotope+3840>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=8, fm=0) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557ca20 <isotope+3840>, f=0) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=8, fm=0) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557ca20 <isotope+3840>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=8, fm=0) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=0) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=8, dydt=0) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557ca20 <isotope+3840>, f=0) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=9, fm=249.0799971393148) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557cc00 <isotope+4320>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=9, fm=249.0799971393148) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557cc00 <isotope+4320>, f=249.0799971393148) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=9, fm=249.0799971393148) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557cc00 <isotope+4320>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=9, fm=249.0799971393148) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=0) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=9, dydt=-107.51737894883479) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557cc00 <isotope+4320>, f=4972927.7131105876) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=10, fm=220.68977922547779) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557cde0 <isotope+4800>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=10, fm=220.68977922547779) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557cde0 <isotope+4800>, f=220.68977922547779) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=10, fm=220.68977922547779) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557cde0 <isotope+4800>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=10, fm=220.68977922547779) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=-107.51737894883479) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=10, dydt=35.902616369957371) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557cde0 <isotope+4800>, f=3536247.5117821069) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=11, fm=18.045794612909432) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557cfc0 <isotope+5280>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=11, fm=18.045794612909432) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557cfc0 <isotope+5280>, f=18.045794612909432) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=11, fm=18.045794612909432) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557cfc0 <isotope+5280>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=11, fm=18.045794612909432) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=35.902616369957371) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=11, dydt=61.347877699304874) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557cfc0 <isotope+5280>, f=927775.72663417482) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=12, fm=2.6423577771705324) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557d1a0 <isotope+5760>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=12, fm=2.6423577771705324) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557d1a0 <isotope+5760>, f=2.6423577771705324) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=12, fm=2.6423577771705324) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557d1a0 <isotope+5760>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=12, fm=2.6423577771705324) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=61.347877699304874) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=12, dydt=10.130070588501377) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557d1a0 <isotope+5760>, f=1501771.8682951713) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=13, fm=2.2391251478204386) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557d380 <isotope+6240>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=13, fm=2.2391251478204386) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557d380 <isotope+6240>, f=2.2391251478204386) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=13, fm=2.2391251478204386) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557d380 <isotope+6240>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=13, fm=2.2391251478204386) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=10.130070588501377) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=13, dydt=0.13680447861453437) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557d380 <isotope+6240>, f=2453187109.5760446) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=14, fm=8.3439920135077329e-05) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557d560 <isotope+6720>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=14, fm=8.3439920135077329e-05) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557d560 <isotope+6720>, f=8.3439920135077329e-05) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=14, fm=8.3439920135077329e-05) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557d560 <isotope+6720>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=14, fm=8.3439920135077329e-05) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=0.13680447861453437) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=14, dydt=9.7734223137794357e-06) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5692	        minny = 0;
(gdb) 
5693	        if(i>0) minny = FminusMax[i-1]+1;
(gdb) 
5694	        accum = 0.0;
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5697	            accum += Fminus[j];
(gdb) 
5696	        for(int j=minny; j<=FminusMax[i]; j++){
(gdb) 
5700	        setSpeciesfminus(i, accum);    // Also sets FminusSum[i] = accum and keff
(gdb) 
setSpeciesfminus (index=21845, fm=6.9533558073733494e-310) at explicitMatrix.cpp:5566
5566	void setSpeciesfminus(int index, double fm){
(gdb) 
5567	    isotope[index].setfminus(fm);
(gdb) 
Species::setfminus (this=0x55555557d560 <isotope+6720>, f=203137966.08156556) at explicitMatrix.cpp:1242
1242	        void setfminus(double f){
(gdb) 
1243	            fminus = f;                 // Class field
(gdb) 
1244	            FminusSum[isoindex] = f;    // Array
(gdb) 
1245	        }
(gdb) 
setSpeciesfminus (index=15, fm=2.7440485637623235e-07) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::getY0 (this=0x55555557d740 <isotope+7200>) at explicitMatrix.cpp:1271
1271	        double getY0() { return YY0; }
(gdb) 
setSpeciesfminus (index=15, fm=2.7440485637623235e-07) at explicitMatrix.cpp:5568
5568	    isotope[index].setkeff(fm/(isotope[index].getY0()+1.0e-30));
(gdb) 
Species::setkeff (this=0x55555557d740 <isotope+7200>, f=2.7440485637623235e-07) at explicitMatrix.cpp:1252
1252	        void setkeff(double f){ keff=f; }
(gdb) 
setSpeciesfminus (index=15, fm=2.7440485637623235e-07) at explicitMatrix.cpp:5569
5569	    keff[index] = isotope[index].getkeff();
(gdb) 
Species::getkeff (this=0x55555557d740 <isotope+7200>) at explicitMatrix.cpp:1312
1312	        double getkeff(){ return keff; }
(gdb) 
setSpeciesfminus (index=15, fm=2.7440485637623235e-07) at explicitMatrix.cpp:5570
5570	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5701
5701	        setSpeciesdYdt(i, FplusSum[i] - FminusSum[i]);
(gdb) 
setSpeciesdYdt (index=0, dydt=9.7734223137794357e-06) at explicitMatrix.cpp:5575
5575	void setSpeciesdYdt(int index, double dydt){
(gdb) 
5576	    isotope[index].setdYdt(dydt);
(gdb) 
Species::setdYdt (this=0x55555555bb49 <setSpeciesfminus(int, double)+204>, d=6.9533558073733494e-310) at explicitMatrix.cpp:1254
1254	        void setdYdt(double d){
(gdb) 
1255	            dYdt = d; 
(gdb) 
1256	            dXdt = d*(double)A;
(gdb) 
1257	            dYDt[isoindex] = d;
(gdb) 
1258	        }
(gdb) 
setSpeciesdYdt (index=15, dydt=3.9034310670612677e-08) at explicitMatrix.cpp:5577
5577	}
(gdb) 
sumFplusFminus () at explicitMatrix.cpp:5690
5690	    for(int i=0; i < numberSpecies; i++){
(gdb) 
5705	}
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5659
5659	}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3805
3805	    }
(gdb) 
Integrate::QSSupdate () at explicitMatrix.cpp:3756
3756	            ssCorrector();
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3813
3813	    static void ssCorrector() {
(gdb) 
3819	        sumX = 0.0;
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=1.5278369695740466e-312) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.036449980249018098) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=3.2739875041129545) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=12.312579125890345) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=162.76465784184643) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=33.570262641424499) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.28116988669927784) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.05095225836746959) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.035754319249235417) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.0092628808838651072) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3843	                    isAsy[i] = false;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.014815995176329396) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=23.910063278073125) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3825	                kBar = 0.5 * (keffZero[i] + keff[i]);
(gdb) 
3826	                kdt = kBar * dt;
(gdb) 
3827	                alphaBar = alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=1.9383069797258017) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssCorrector () at explicitMatrix.cpp:3828
3828	                FplusTilde = alphaBar * FplusSum[i] + (1.0 - alphaBar) * FplusZero[i];
(gdb) 
3829	                Y[i] = Y0[i] + ((FplusTilde - kBar * Y0[i]) * dt) / (1 + alphaBar * kdt);
(gdb) 
3830	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3836	                if (kdt >= 1.0) {
(gdb) 
3838	                    isAsy[i] = true;
(gdb) 
3839	                    totalAsy ++;
(gdb) 
3849	                sumX += X[i];
(gdb) 
3823	        for (int i = 0; i< ISOTOPES; i++) {
(gdb) 
3852	    }
(gdb) 
Integrate::QSSupdate () at explicitMatrix.cpp:3760
3760	            if (nitQSS > 1) {
(gdb) 
3753	        for (int i = 0; i < nitQSS; i++) {
(gdb) 
3764	    }
(gdb) 
Integrate::updatePopulations (dtt=1.0152587412429789e-08) at explicitMatrix.cpp:3643
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=1.0152587412429789e-08, sumXX=1.0000000000000002) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
std::min<double> (__a=<error reading variable>, __b=<error reading variable>) at /usr/include/c++/9/bits/stl_algobase.h:198
198	    min(const _Tp& __a, const _Tp& __b)
(gdb) 
203	      if (__b < __a)
(gdb) 
204		return __b;
(gdb) 
206	    }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3431
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
Integrate::storeCurrentY () at explicitMatrix.cpp:3515
3515	        static void storeCurrentY(){
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3517	                Ystore[i] = Y[i];
(gdb) 
3516	            for(int i=0; i<ISOTOPES; i++){
(gdb) 
3519	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3439
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 
Integrate::updatePopulations (dtt=1.0152587412429789e-08) at explicitMatrix.cpp:3631
3631	        static void updatePopulations(double dtt){
(gdb) 
3636	            if(doQSS){
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.0152587412429789e-08) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Integrate::QSSupdate () at explicitMatrix.cpp:3746
3746	    static void QSSupdate(){
(gdb) 
3751	        int nitQSS = 1;
(gdb) 
3753	        for (int i = 0; i < nitQSS; i++) {
(gdb) 
3755	            ssPredictor();
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3771
3771	    static void ssPredictor() {
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3779	            FplusZero[i] = FplusSum[i];
(gdb) 
3780	            keffZero[i] = keff[i];
(gdb) 
3777	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=3.465929372756948e-313) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.037359272025860167) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=1.0286708062505932) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=19.0125065388576) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=111.42024940526672) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=34.323987380977727) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.2799427003633651) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.050488083303049811) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.035902061975355185) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.0094193241637840243) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=0.015246870166394724) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=24.906196569016767) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3793	                double kdt = keff[i] * dt;
(gdb) 
3794	                double deno = 1.0 + kdt*alphaValue(kdt);
(gdb) 
Integrate::alphaValue (a=2.0623759574262919) at explicitMatrix.cpp:3860
3860	    static double alphaValue(double a) {
(gdb) 
3862	        double aa = a;
(gdb) 
3866	        if (aa < 1.e-20) aa = 1e-20; 
(gdb) 
3868	        double ainv = 1.0/aa;
(gdb) 
3869	        double a2 = ainv * ainv;
(gdb) 
3870	        double a3 = a2 * ainv;
(gdb) 
3872	        return (180.0 * a3 + 60.0 * a2 + 11.0 * ainv + 1.0)
(gdb) 
3873	            / (360.0 * a3 + 60.0 * a2 + 12.0 * ainv + 1.0);
(gdb) 
3875		}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3796
3796	                Y[i] = Y0[i] + (FplusSum[i] - FminusSum[i])*dt / deno;
(gdb) 
3797	                X[i] = Y[i] * (double)AA[i];
(gdb) 
3791	        for (int i = 0; i < ISOTOPES; i++) {
(gdb) 
3803	        computeReactionFluxes();
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5626
5626	void computeReactionFluxes(){
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x40214c30518f8917) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x3fbe48065588a252, bodies=1075898489) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2094	                    kfac = Rrate * Y[ reactantIndex[0] ] * Y[ reactantIndex[1] ];
(gdb) 
2095	                    flux = kfac * Y[ reactantIndex[2] ];  // Put in Reaction object flux field
(gdb) 
2096	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2097	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555555c04b <sumFplusFminus()+427>, testRate=6.9533558073757209e-310) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557d940 <reaction>, bodies=3) at explicitMatrix.cpp:2099
2099	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557d940 <reaction>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557d940 <reaction>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557d940 <reaction>, bodies=3) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2094	                    kfac = Rrate * Y[ reactantIndex[0] ] * Y[ reactantIndex[1] ];
(gdb) 
2095	                    flux = kfac * Y[ reactantIndex[2] ];  // Put in Reaction object flux field
(gdb) 
2096	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2097	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557d940 <reaction>, testRate=727.26158609757488) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557db18 <reaction+472>, bodies=3) at explicitMatrix.cpp:2099
2099	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557db18 <reaction+472>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557db18 <reaction+472>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557db18 <reaction+472>, bodies=3) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557db18 <reaction+472>, testRate=0) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557dcf0 <reaction+944>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557dcf0 <reaction+944>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557dcf0 <reaction+944>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557dcf0 <reaction+944>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557dcf0 <reaction+944>, testRate=0) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557dec8 <reaction+1416>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557dec8 <reaction+1416>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557dec8 <reaction+1416>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557dec8 <reaction+1416>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557dec8 <reaction+1416>, testRate=24750940) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e0a0 <reaction+1888>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e0a0 <reaction+1888>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e0a0 <reaction+1888>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e0a0 <reaction+1888>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e0a0 <reaction+1888>, testRate=3481459.9501658427) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e278 <reaction+2360>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e278 <reaction+2360>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e278 <reaction+2360>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e278 <reaction+2360>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e278 <reaction+2360>, testRate=288200069.67777544) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e450 <reaction+2832>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e450 <reaction+2832>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e450 <reaction+2832>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e450 <reaction+2832>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e450 <reaction+2832>, testRate=2758567.75) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e628 <reaction+3304>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e628 <reaction+3304>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e628 <reaction+3304>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e628 <reaction+3304>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e628 <reaction+3304>, testRate=228352016) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e800 <reaction+3776>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e800 <reaction+3776>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e800 <reaction+3776>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e800 <reaction+3776>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e800 <reaction+3776>, testRate=337600876.88960141) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557e9d8 <reaction+4248>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557e9d8 <reaction+4248>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557e9d8 <reaction+4248>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557e9d8 <reaction+4248>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557e9d8 <reaction+4248>, testRate=193821039.80577731) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ebb0 <reaction+4720>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ebb0 <reaction+4720>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ebb0 <reaction+4720>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ebb0 <reaction+4720>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ebb0 <reaction+4720>, testRate=0.063377685733027406) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ed88 <reaction+5192>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ed88 <reaction+5192>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ed88 <reaction+5192>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ed88 <reaction+5192>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ed88 <reaction+5192>, testRate=315826832.00860101) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557ef60 <reaction+5664>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557ef60 <reaction+5664>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557ef60 <reaction+5664>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557ef60 <reaction+5664>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557ef60 <reaction+5664>, testRate=3.0955657958984375) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f138 <reaction+6136>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f138 <reaction+6136>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f138 <reaction+6136>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f138 <reaction+6136>, bodies=1) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f138 <reaction+6136>, testRate=15430676480) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f310 <reaction+6608>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f310 <reaction+6608>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f310 <reaction+6608>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f310 <reaction+6608>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f310 <reaction+6608>, testRate=18284126.470462229) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f4e8 <reaction+7080>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f4e8 <reaction+7080>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f4e8 <reaction+7080>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f4e8 <reaction+7080>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f4e8 <reaction+7080>, testRate=348165.62157738861) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f6c0 <reaction+7552>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f6c0 <reaction+7552>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f6c0 <reaction+7552>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f6c0 <reaction+7552>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f6c0 <reaction+7552>, testRate=33322.398054812584) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557f898 <reaction+8024>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557f898 <reaction+8024>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557f898 <reaction+8024>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557f898 <reaction+8024>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557f898 <reaction+8024>, testRate=92.151705698890211) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fa70 <reaction+8496>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fa70 <reaction+8496>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fa70 <reaction+8496>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fa70 <reaction+8496>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2085	                    kfac = Rrate * Y[ reactantIndex[0] ];
(gdb) 
2086	                    flux = kfac * Y[ reactantIndex[1] ];  // Put in Reaction object flux field
(gdb) 
2087	                    Flux[reacIndex] = flux;               // Put in main flux array
(gdb) 
2088	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fa70 <reaction+8496>, testRate=14178.314548183145) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fc48 <reaction+8968>, bodies=2) at explicitMatrix.cpp:2090
2090	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fc48 <reaction+8968>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fc48 <reaction+8968>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) 
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
Reaction::fluxChooser (this=0x55555557fc48 <reaction+8968>, bodies=2) at explicitMatrix.cpp:2068
2068	    void fluxChooser(int bodies){
(gdb) 
2072	            switch(bodies){
(gdb) 
2076	                    kfac = Rrate;
(gdb) 
2077	                    flux = kfac*Y[ reactantIndex[0] ];	 // In Reaction object flux field
(gdb) 
2078	                    Flux[reacIndex] = flux;              // In main flux array
(gdb) 
2079	                    fastSlowRates(kfac);
(gdb) 
Reaction::fastSlowRates (this=0x55555557fc48 <reaction+8968>, testRate=5470379120.7869692) at explicitMatrix.cpp:2110
2110	        void fastSlowRates(double testRate){
(gdb) 
2112	            if (testRate > fastestCurrentRate) {
(gdb) 
2117	            if (testRate < slowestCurrentRate && testRate > 0.0) {
(gdb) 
2122	            if (testRate > fastestOverallRate) {
(gdb) 
2128	            if (testRate < slowestOverallRate){
(gdb) 
2133	        }  // End of function Reaction::fastSlowRates()
(gdb) 
Reaction::fluxChooser (this=0x55555557fe20 <reaction+9440>, bodies=1) at explicitMatrix.cpp:2081
2081	                    break;
(gdb) 
2103	    }       // end function Reaction::fluxChooser(int)
(gdb) 
Reaction::computeFlux (this=0x55555557fe20 <reaction+9440>) at explicitMatrix.cpp:2061
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
Reaction::computeFlux (this=0x55555557fe20 <reaction+9440>) at explicitMatrix.cpp:2032
2032	        void computeFlux(){
(gdb) n
2042	            isEquil = !reacIsActive[reacIndex];  // Set isEquil in Reaction object
(gdb) 
2044	            if( reacIsActive[reacIndex] ) {
(gdb) 
2046	                fluxChooser(numberReactants);
(gdb) 
2061	        }   // End of function computeFlux()
(gdb) 
computeReactionFluxes () at explicitMatrix.cpp:5636
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5637	        reaction[i].computeFlux();
(gdb) 
5636	    for(int i=0; i<SIZE; i++){
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5644	        RG[i].setRGfluxes();
(gdb) 
5643	    for(int i=0; i<numberRG; i++){
(gdb) 
5654	    Reaction::populateFplusFminus();
(gdb) 
5658	    sumFplusFminus();
(gdb) 
5659	}
(gdb) 
Integrate::ssPredictor () at explicitMatrix.cpp:3805
3805	    }
(gdb) 
Integrate::QSSupdate () at explicitMatrix.cpp:3756
3756	            ssCorrector();
(gdb) 
3760	            if (nitQSS > 1) {
(gdb) 
3753	        for (int i = 0; i < nitQSS; i++) {
(gdb) 
3764	    }
(gdb) 
Integrate::updatePopulations (dtt=1.0152587412429789e-08) at explicitMatrix.cpp:3643
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=5.0762937062148946e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=5.0762937062148946e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 1.0152587412429789e-08
New value = 5.0762937062148946e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 448
New value = 449
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=5.0762937062148946e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=5.0762937062148946e-09, sumXX=1) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=5.0762937062148946e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.5381468531074473e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.5381468531074473e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 5.0762937062148946e-09
New value = 2.5381468531074473e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 449
New value = 450
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.5381468531074473e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=2.5381468531074473e-09, sumXX=0.99999999999999989) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.5381468531074473e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.2690734265537236e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.2690734265537236e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 2.5381468531074473e-09
New value = 1.5122243466769097e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 450
New value = 451
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.5122243466769097e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=1.5122243466769097e-09, sumXX=1) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.5122243466769097e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=7.5611217333845487e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=7.5611217333845487e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 1.5122243466769097e-09
New value = 2.7549300807799214e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 451
New value = 452
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.7549300807799214e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=2.7549300807799214e-09, sumXX=1.0000000000000002) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=2.7549300807799214e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.3774650403899607e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.3774650403899607e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 2.7549300807799214e-09
New value = 1.3774650403899607e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 452
New value = 453
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.3774650403899607e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=1.3774650403899607e-09, sumXX=0.99999999999999978) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=1.3774650403899607e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3447
3447	            sumXfull = sumX;
(gdb) 
3451	            restoreCurrentY();
(gdb) 
3452	            dt_half = 0.5*dt;
(gdb) 
3453	            dtMode = 1;
(gdb) 
3454	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=6.8873252019498034e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3458
3458	            dE_half1 = dE_halfstep()*dt_half;
(gdb) 
3462	            t = t_saved + dt_half; 
(gdb) 
3466	            computeReactionFluxes(); 
(gdb) 
3472	            updateY0();
(gdb) 
3473	            dtMode = 2;
(gdb) 
3474	            updatePopulations(dt_half);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=6.8873252019498034e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3475
3475	            sumXhalf = sumX; 
(gdb) 
3479	            dE_half2 = dE_halfstep()*dt_half;
(gdb) 
3483	            sumhalves = dE_half1 + dE_half2;
(gdb) 
3484	            ERelease += sumhalves;
(gdb) 
3485	            netdERelease = (sumhalves/2.0) / dt_half;
(gdb) 
3487	            t += dt_half;
(gdb) 
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
3493	            Error_Desired = EpsA;       // Neglect EpsR for now
(gdb) 
3498	            dt = dt_saved;
(gdb) 
3499	            t = t_saved + dt;
(gdb) 
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 

Hardware watchpoint 2: dt

Old value = 1.3774650403899607e-09
New value = 7.8607952604858036e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 453
New value = 454
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) c
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=7.8607952604858036e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=7.8607952604858036e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.9303976302429018e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.9303976302429018e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 7.8607952604858036e-10
New value = 1.0226348294714233e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 454
New value = 455
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.0226348294714233e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.0226348294714233e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.1131741473571167e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.1131741473571167e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 1.0226348294714233e-09
New value = 5.1131741473571167e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 455
New value = 456
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.1131741473571167e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.1131741473571167e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.5565870736785584e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.5565870736785584e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 5.1131741473571167e-10
New value = 3.3966369351434305e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) n
3508	        }    // End of doIntegrationStep
(gdb) 
main () at explicitMatrix.cpp:4288
4288	        totalTimeSteps ++; 
(gdb) 

Hardware watchpoint 4: totalTimeSteps

Old value = 456
New value = 457
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
4297	        if(hasBe8 && hasAlpha){
(gdb) 
4308	        if( (doPE && t > equilibrateTime)){
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4311	                RG[i].computeEquilibrium();
(gdb) 
4310	            for(int i = 0; i < numberRG; i++) {
(gdb) 
4314	            if(totalEquilRG > 0){
(gdb) 
4320	                restoreEquilibriumProg();
(gdb) 
4328	        if(showPE){
(gdb) 
4338	        totalAsy = 0;
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4340	            if (isAsy[i]){totalAsy ++;}
(gdb) 
4339	        for(int i=0; i<ISOTOPES; i++){
(gdb) 
4354	        if(t >= plotTimeTargets[plotCounter-1]){
(gdb) 
4235	    while(t < stop_time){ 
(gdb) 
4239	        fastestCurrentRate = 0.0;
(gdb) 
4240	        slowestCurrentRate = 1e30; 
(gdb) 
4244	        updateY0();
(gdb) 
4251	        if(hydroProfile && totalTimeSteps > 1) T9 = Utilities::interpolate_T(t);
(gdb) 
4252	        if(hydroProfile && totalTimeSteps > 1) rho = Utilities::interpolate_rho(t);
(gdb) 
4262	        if( (hydroProfile) && totalTimeSteps > 1){
(gdb) 
4273	        computeReactionFluxes();
(gdb) 
4278	        getmaxdYdt();
(gdb) 
4283	        Integrate::doIntegrationStep();
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) 
3662	        }  // End of updatePopulations
(gdb) 
Integrate::computeTimeStep_QSS (dt0=3.3966369351434305e-10, sumXX=0.99999999999999956) at explicitMatrix.cpp:3570
3570	            iterations = 0;
(gdb) 
3572	            diffXzero = diffX;
(gdb) 
3574	            while( diffX > massTol && iterations < maxit){
(gdb) 
3585	            diffXfinal = diffX;
(gdb) 
3587	            return dtt;
(gdb) 
3589	        }
(gdb) 
Integrate::doIntegrationStep () at explicitMatrix.cpp:3430
3430	                if(dt_QSS < dt_FE)choice2 = 1;
(gdb) 
3431	                dt = min(dt_FE, dt_QSS);
(gdb) 
3438	            storeCurrentY();
(gdb) 
3439	            dt_saved = dt;
(gdb) 
3440	            t = t_saved;
(gdb) 
3445	            dtMode = 0;
(gdb) 
3446	            updatePopulations(dt);
(gdb) 

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
3643	            if(doASY){
(gdb) c
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.6983184675717152e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) watch t
Hardware watchpoint 5: t
(gdb) c
Continuing.

Hardware watchpoint 5: t

Old value = 3.0472378984716664e-07
New value = 3.0489362169392383e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) c
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.6983184675717152e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) c
Continuing.

Hardware watchpoint 5: t

Old value = 3.0489362169392383e-07
New value = 3.0506345354068102e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0506345354068102e-07
New value = 3.0506345354068097e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 3.3966369351434305e-10
New value = 6.793273870286861e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 457
New value = 458
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0506345354068097e-07
New value = 3.0540311723419529e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0540311723419529e-07
New value = 3.0574278092770962e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0574278092770962e-07
New value = 3.0574278092770967e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 6.793273870286861e-10
New value = 1.3586547740573722e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 458
New value = 459
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0574278092770967e-07
New value = 3.0642210831473837e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0642210831473837e-07
New value = 3.0710143570176707e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0710143570176707e-07
New value = 3.0710143570176702e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 1.3586547740573722e-09
New value = 2.7173095481147444e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 459
New value = 460
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0710143570176702e-07
New value = 3.0846009047582436e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0846009047582436e-07
New value = 3.0981874524988171e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0981874524988171e-07
New value = 3.0981874524988176e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 2.7173095481147444e-09
New value = 5.4346190962294888e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 460
New value = 461
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.0981874524988176e-07
New value = 3.1253605479799651e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.1253605479799651e-07
New value = 3.1525336434611126e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 5.4346190962294888e-09
New value = 1.0869238192458978e-08
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 461
New value = 462
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.0869238192458978e-08) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.0869238192458978e-08) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.1525336434611126e-07
New value = 3.2068798344234076e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.2068798344234076e-07
New value = 3.2612260253857026e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 1.0869238192458978e-08
New value = 5.4346190962294888e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 462
New value = 463
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=5.4346190962294888e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.2612260253857026e-07
New value = 3.28839912086685e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.28839912086685e-07
New value = 3.3155722163479975e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 5.4346190962294888e-09
New value = 2.7173095481147444e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 463
New value = 464
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=2.7173095481147444e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.3155722163479975e-07
New value = 3.329158764088571e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.329158764088571e-07
New value = 3.3427453118291445e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.3427453118291445e-07
New value = 3.342745311829145e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 2.7173095481147444e-09
New value = 1.3586547740573722e-09
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 464
New value = 465
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.3586547740573722e-09) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.342745311829145e-07
New value = 3.349538585699432e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.349538585699432e-07
New value = 3.356331859569719e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.356331859569719e-07
New value = 3.3563318595697185e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 1.3586547740573722e-09
New value = 6.793273870286861e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 465
New value = 466
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=6.793273870286861e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.3563318595697185e-07
New value = 3.3597284965048617e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3466
3466	            computeReactionFluxes(); 
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.3597284965048617e-07
New value = 3.363125133440005e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3492
3492	            Error_Observed = abs(sumXhalf - sumXfull);
(gdb) 
Continuing.

Hardware watchpoint 5: t

Old value = 3.363125133440005e-07
New value = 3.3631251334400055e-07
Integrate::doIntegrationStep () at explicitMatrix.cpp:3503
3503	            dt = computeNextTimeStep(Error_Observed, Error_Desired, dt_saved);
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 6.793273870286861e-10
New value = 3.3966369351434305e-10
Integrate::doIntegrationStep () at explicitMatrix.cpp:3505
3505	            double bpd = dt;   // Dummy statement for breakpoint
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 466
New value = 467
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=3.3966369351434305e-10) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 2: dt

Old value = 3.3966369351434305e-10
New value = 1.8701235349427157e-153
Integrate::doIntegrationStep () at explicitMatrix.cpp:3438
3438	            storeCurrentY();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 467
New value = 468
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 468
New value = 469
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 469
New value = 470
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 470
New value = 471
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 471
New value = 472
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 472
New value = 473
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 473
New value = 474
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 474
New value = 475
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 475
New value = 476
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 476
New value = 477
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 477
New value = 478
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 478
New value = 479
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 479
New value = 480
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 480
New value = 481
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 481
New value = 482
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 482
New value = 483
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 483
New value = 484
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 484
New value = 485
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 485
New value = 486
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 486
New value = 487
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 487
New value = 488
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 488
New value = 489
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 489
New value = 490
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 490
New value = 491
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 491
New value = 492
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 492
New value = 493
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 493
New value = 494
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 494
New value = 495
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 495
New value = 496
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 496
New value = 497
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 497
New value = 498
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 498
New value = 499
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 499
New value = 500
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 500
New value = 501
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 501
New value = 502
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 502
New value = 503
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 503
New value = 504
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 504
New value = 505
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 505
New value = 506
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 506
New value = 507
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 507
New value = 508
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 508
New value = 509
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 509
New value = 510
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 510
New value = 511
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 511
New value = 512
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 512
New value = 513
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 513
New value = 514
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 514
New value = 515
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 515
New value = 516
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 516
New value = 517
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 517
New value = 518
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 518
New value = 519
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 519
New value = 520
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 520
New value = 521
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 521
New value = 522
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) c
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 522
New value = 523
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 523
New value = 524
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 524
New value = 525
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 525
New value = 526
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 526
New value = 527
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 527
New value = 528
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 528
New value = 529
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 529
New value = 530
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 530
New value = 531
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 531
New value = 532
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 532
New value = 533
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 533
New value = 534
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 534
New value = 535
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 535
New value = 536
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 536
New value = 537
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 537
New value = 538
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 538
New value = 539
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Hardware watchpoint 4: totalTimeSteps

Old value = 539
New value = 540
main () at explicitMatrix.cpp:4292
4292	        sumXtrue = Utilities::sumMassFractions();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=1.8701235349427157e-153) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 
Continuing.

Breakpoint 1, Integrate::updatePopulations (dtt=9.3506176747135787e-154) at explicitMatrix.cpp:3637
3637	                QSSupdate();
(gdb) 